/* generation_gpu.c - contains kernels used for generating the timetable */

// Kernels that apply the matrix on a column (this is a 2d kernel)
/* First dimension is the index of the row/col in the population
 * Second dimension is the index of the possibility in the row/col
*/

/* Whenever indexing the table buffers, the dimensions are {population, sections, sessions, possibilities}
 * Whenever indexing the row matrices the dimensions are {population, row, col-from, possibility-from, col-to possibility-to}
 * for col matrices, the dimensions are {population, col, row-to, possibility-to, row-from, possibility-from}
*/


__kernel void apply_row_matrix(__global float *source, __global float *destination, __global float *row_matrix, int population, int sessions, int sections, int possiblities) {
    /* This applies the row matrix transporting from the col buffer to the row buffer */
    int row_index = get_global_id(0); /* Get the index of the row in the population */
    int dest_index = get_global_id(1); /* Get the index of the possibility in the row */ 
    float weighted_sum = 0; /* We add the stuff to this number here */
    int row_length = sessions * possibilities; /* This is for indexing purposes */
    int matrix_offset = (sessions * possibilities * sessions * possibilities) * row_index; /* Offset in the matrix which we index from */
    int table_offset = row_length * row_index; /* Offset in the tables that we index from */

    for (int from_index = 0; from_index < row_length; from_index++)  /* Loop through all the cells in the row */
        weighted_sum += source[table_offset + from_index] * row_matrix[

